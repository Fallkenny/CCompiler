----------------------------
|                          |
|          TOKENS          |
|                          |
----------------------------
TK_int 1
TK_float 2
TK_char 3
TK_struct 4
TK_if 5
TK_else 6
TK_id 7
TK_Abre_Colch 8
TK_Fecha_Colch 9
TK_Abre_Chaves 10
TK_Fecha_Chaves 11
TK_Fim_Arquivo 12
TK_Atrib 13
TK_Const_Int 14
TK_Mais 15
TK_Menos 16
TK_Mult 17
TK_Abre_Par 18
TK_Fecha_Par 19
TK_Virgula 20
TK_PontoEVirgula 21
TK_Maior 22
TK_Menor 23
TK_Menor_Igual 24
TK_Maior_Igual 25
TK_Igual 26
TK_Diferente 27
TK_while 28


Program -> main_func

main_func-> 'int main' compound_statement
compound_statement -> '{' '}' | '{'  block_item_list '}'
block_item_list -> block_item | block_item_list block_item
block_item -> declaration | statement

declaration -> declaration_specifiers ';'| declaration_specifiers init_declarator_list ';'
declaration_specifiers -> type_specifier declaration_specifiers	| type_specifier

type_specifier -> INT | FLOAT

init_declarator_list -> init_declarator	| init_declarator_list ',' init_declarator

init_declarator -> IDENTIFIER '=' initializer	| declarator
declarator -> direct_declarator

direct_declarator -> IDENTIFIER

initializer -> '{' initializer_list '}'	| '{' initializer_list ',' '}' | assignment_expression

initializer_list -> designation initializer	| initializer | initializer_list ',' designation initializer 
					| initializer_list ',' initializer

assignment_expression -> conditional_expression	| unary_expression assignment_operator assignment_expression

designation -> designator_list '='

designator_list -> designator | designator_list designator
designator -> '[' constant_expression ']' | '.' IDENTIFIER

conditional_expression -> logical_or_expression	

logical_or_expression -> logical_and_expression	| logical_or_expression '||' logical_and_expression	
logical_and_expression -> inclusive_or_expression | logical_and_expression '&&' inclusive_or_expression
inclusive_or_expression -> exclusive_or_expression | inclusive_or_expression '|' exclusive_or_expression
exclusive_or_expression -> and_expression | exclusive_or_expression '^' and_expression
and_expression -> equality_expression | and_expression '&' equality_expression
equality_expression -> relational_expression | equality_expression '==' relational_expression | equality_expression '!=' relational_expression
relational_expression -> additive_expression | relational_expression '<' additive_expression | relational_expression '>' additive_expression
additive_expression -> multiplicative_expression | additive_expression '+' multiplicative_expression | additive_expression '-' multiplicative_expression
multiplicative_expression-> unary_expression | multiplicative_expression '*' unary_expression | multiplicative_expression '/' unary_expression	| multiplicative_expression '%' unary_expression
unary_expression -> postfix_expression| '++' unary_expression | '--' unary_expression | unary_operator unary_expression; 
unary_operator -> '&'| '*'| '+'| '-'| '~'| '!'

postfix_expression -> primary_expression |  postfix_expression '++' | postfix_expression '--'

primary_expression-> IDENTIFIER	| constant	| '(' expression ')'

assignment_operator -> '='| '*=' | '/='	| '%='| '+='| '-='| '<<='| '>>='| '&='| '^=' | '|='

statement ->  compound_statement | expression_statement | selection_statement | iteration_statement	| jump_statement

expression_statement -> ';'	| expression ';'
expression -> assignment_expression	| expression ',' assignment_expression;
selection_statement -> IF '(' expression ')' statement ELSE statement	| IF '(' expression ')' statement
iteration_statement -> WHILE '(' expression ')' statement | DO statement WHILE '(' expression ')' ';'
	| FOR '(' expression_statement expression_statement ')' statement
	| FOR '(' expression_statement expression_statement expression ')' statement
	| FOR '(' declaration expression_statement ')' statement
	| FOR '(' declaration expression_statement expression ')' statement

jump_statement -> CONTINUE ';' | BREAK ';' 